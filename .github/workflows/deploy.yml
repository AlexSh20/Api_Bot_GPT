name: CI/CD Pipeline - Build and Deploy

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata for Docker
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: false
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

    - name: Push Docker image to GitHub Container Registry
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha

    - name: Image digest
      run: echo "Image pushed with digest: ${{ steps.build.outputs.digest }}"

  deploy:
    name: Deploy to VPS
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Deploy to VPS via SSH
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.VPS_HOST }}
        username: ${{ secrets.VPS_USER }}
        key: ${{ secrets.VPS_SSH_KEY }}
        port: ${{ secrets.VPS_PORT || 22 }}
        script: |
          echo "🚀 Starting deployment process..."

          # Переход в директорию проекта
          cd /opt/api-bot-gpt || { echo "❌ Project directory not found"; exit 1; }

          # Логин в GitHub Container Registry
          echo "🔐 Logging into GitHub Container Registry..."
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

          # Скачивание нового Docker образа
          echo "📥 Pulling new Docker image..."
          docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }} || docker pull ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest

          # Обновление docker-compose файла с новым образом
          echo "📝 Updating docker-compose configuration..."
          sed -i 's|image: ghcr.io.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ github.ref_name }}|g' docker-compose.prod.yml || \
          sed -i 's|image: ghcr.io.*|image: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest|g' docker-compose.prod.yml

          # Остановка старых контейнеров
          echo "🛑 Stopping old containers..."
          docker-compose -f docker-compose.prod.yml down || true

          # Запуск новых контейнеров
          echo "🚀 Starting new containers..."
          docker-compose -f docker-compose.prod.yml up -d

          # Ожидание запуска сервисов
          echo "⏳ Waiting for services to start..."
          sleep 30

          # Выполнение миграций базы данных
          echo "🗄️ Running database migrations..."
          docker-compose -f docker-compose.prod.yml exec -T web python manage.py migrate --noinput

          # Сбор статических файлов
          echo "📦 Collecting static files..."
          docker-compose -f docker-compose.prod.yml exec -T web python manage.py collectstatic --noinput

          # Проверка статуса сервисов
          echo "🔍 Checking service status..."
          docker-compose -f docker-compose.prod.yml ps

          # Очистка неиспользуемых Docker образов
          echo "🧹 Cleaning up unused Docker images..."
          docker system prune -f

          # Проверка работоспособности приложения
          echo "🏥 Health check..."
          if curl -f http://localhost/admin/ > /dev/null 2>&1; then
            echo "✅ Application is running successfully!"
          else
            echo "⚠️ Application might not be fully ready yet"
          fi

          echo "🎉 Deployment completed!"

    - name: Notify deployment status
      if: always()
      run: |
        if [ "${{ job.status }}" == "success" ]; then
          echo "✅ Deployment successful!"
        else
          echo "❌ Deployment failed!"
        fi