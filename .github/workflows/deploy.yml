---
name: CI/CD Pipeline - Build and Deploy

"on":
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Debug - List files
        run: |
          echo "Current directory:"
          pwd
          echo "Files in root:"
          ls -la
          echo "Checking for Dockerfile:"
          if [ -f "Dockerfile" ]; then
            echo "✓ Dockerfile found"
          else
            echo "✗ Dockerfile not found"
          fi
          echo "Checking for requirements.txt:"
          if [ -f "requirements.txt" ]; then
            echo "✓ requirements.txt found"
          else
            echo "✗ requirements.txt not found"
          fi

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: Build Docker image
        id: build-test
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          push: false
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Push Docker image to GitHub Container Registry
        id: build-push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Image digest
        run: >
          echo "Image pushed with digest:
          ${{ steps.build-push.outputs.digest }}"

  deploy:
    name: Deploy to VPS
    needs: build-and-push
    runs-on: ubuntu-latest
    if: >
      github.ref == 'refs/heads/main' ||
      github.ref == 'refs/heads/master'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Test SSH Connection
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          timeout: 30s
          script: |
            echo "SSH connection successful!"
            echo "Current directory: $(pwd)"
            echo "User: $(whoami)"
            echo "Docker version: $(docker --version)"
            echo "Docker Compose version: $(docker-compose --version)"

      - name: Deploy to VPS via SSH
        uses: appleboy/ssh-action@v1.0.0
        env:
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          GITHUB_ACTOR: ${{ github.actor }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          BRANCH_NAME: ${{ github.ref_name }}
        with:
          host: ${{ secrets.VPS_HOST }}
          username: ${{ secrets.VPS_USER }}
          key: ${{ secrets.VPS_SSH_KEY }}
          port: ${{ secrets.VPS_PORT || 22 }}
          timeout: 60s
          command_timeout: 10m
          envs: REGISTRY,IMAGE_NAME,GITHUB_ACTOR,GITHUB_TOKEN,BRANCH_NAME
          script: |
            set -e
            echo "Starting deployment process..."

            # Проверка переменных окружения
            echo "Registry: $REGISTRY"
            echo "Image: $IMAGE_NAME"
            echo "Branch: $BRANCH_NAME"

            # Переход в директорию проекта
            cd /opt/api-bot-gpt || {
              echo "Project directory not found at /opt/api-bot-gpt"
              echo "Available directories:"
              ls -la /opt/
              exit 1
            }

            # Логин в GitHub Container Registry
            echo "Logging into GitHub Container Registry..."
            echo "$GITHUB_TOKEN" | docker login ghcr.io -u "$GITHUB_ACTOR" --password-stdin

            # Определение тега образа
            IMAGE_TAG="${BRANCH_NAME:-latest}"
            FULL_IMAGE_NAME="$REGISTRY/$IMAGE_NAME:$IMAGE_TAG"
            echo "Using image: $FULL_IMAGE_NAME"

            # Скачивание нового Docker образа
            echo "Pulling Docker image..."
            docker pull "$FULL_IMAGE_NAME" || {
              echo "Failed to pull $FULL_IMAGE_NAME, trying latest..."
              docker pull "$REGISTRY/$IMAGE_NAME:latest"
              FULL_IMAGE_NAME="$REGISTRY/$IMAGE_NAME:latest"
            }

            # Обновление docker-compose файла
            echo "Updating docker-compose configuration..."
            if [ -f docker-compose.prod.yml ]; then
              sed -i "s|image: ghcr.io.*|image: $FULL_IMAGE_NAME|g" docker-compose.prod.yml
              echo "Updated docker-compose.prod.yml"
            else
              echo "docker-compose.prod.yml not found!"
              ls -la
              exit 1
            fi

            # Остановка старых контейнеров
            echo "Stopping old containers..."
            docker-compose -f docker-compose.prod.yml down || true

            # Запуск новых контейнеров
            echo "Starting new containers..."
            docker-compose -f docker-compose.prod.yml up -d

            # Проверка статуса сервисов
            echo "Checking service status..."
            docker-compose -f docker-compose.prod.yml ps

            # Очистка неиспользуемых Docker образов
            echo "Cleaning up unused Docker images..."
            docker system prune -f || true

            echo "Deployment completed successfully!"
      - name: Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "Deployment successful!"
          else
            echo "Deployment failed!"
          fi