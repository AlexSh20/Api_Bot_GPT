import asyncio
import logging
import time
from typing import Dict, Optional
from telegram import Bot as TelegramBot, Update
from telegram.ext import Application, MessageHandler, CommandHandler, filters
from django.utils import timezone
from ..models import Bot, TelegramUser, Conversation
from .gpt_service import GPTService

logger = logging.getLogger(__name__)


class TelegramBotService:
    """–°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å Telegram –±–æ—Ç–æ–º –≤ polling —Ä–µ–∂–∏–º–µ"""

    def __init__(self, bot_instance: Bot):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–µ—Ä–≤–∏—Å–∞

        Args:
            bot_instance: –≠–∫–∑–µ–º–ø–ª—è—Ä –º–æ–¥–µ–ª–∏ Bot
        """
        self.bot_instance = bot_instance
        self.telegram_bot = TelegramBot(token=bot_instance.telegram_token)
        self.gpt_service = GPTService(api_key=bot_instance.gpt_api_key)
        self.application = None
        self.is_running = False

    async def setup_application(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Application"""
        self.application = (
            Application.builder().token(self.bot_instance.telegram_token).build()
        )

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self.application.add_handler(CommandHandler("start", self.handle_start))
        self.application.add_handler(CommandHandler("help", self.handle_help))
        self.application.add_handler(CommandHandler("clear", self.handle_clear))
        self.application.add_handler(CommandHandler("settings", self.handle_settings))

        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        self.application.add_handler(
            MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_message)
        )

        logger.info(f"Bot '{self.bot_instance.name}' application configured")

    def get_or_create_telegram_user(self, telegram_user_data) -> TelegramUser:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram"""
        user, created = TelegramUser.objects.get_or_create(
            telegram_id=telegram_user_data.id,
            defaults={
                "username": telegram_user_data.username,
                "first_name": telegram_user_data.first_name or "",
                "last_name": telegram_user_data.last_name or "",
                "is_bot": telegram_user_data.is_bot,
            },
        )

        # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –µ—Å–ª–∏ –æ–Ω–∏ –∏–∑–º–µ–Ω–∏–ª–∏—Å—å
        if not created:
            updated = False
            if user.username != telegram_user_data.username:
                user.username = telegram_user_data.username
                updated = True
            if user.first_name != (telegram_user_data.first_name or ""):
                user.first_name = telegram_user_data.first_name or ""
                updated = True
            if user.last_name != (telegram_user_data.last_name or ""):
                user.last_name = telegram_user_data.last_name or ""
                updated = True

            if updated:
                user.save()

        return user

    def get_or_create_conversation(self, telegram_user: TelegramUser) -> Conversation:
        """–ü–æ–ª—É—á–∏—Ç—å –∏–ª–∏ —Å–æ–∑–¥–∞—Ç—å –¥–∏–∞–ª–æ–≥"""
        conversation, created = Conversation.objects.get_or_create(
            bot=self.bot_instance,
            telegram_user=telegram_user,
            defaults={"is_active": True},
        )
        return conversation

    async def handle_start(self, update: Update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        user = self.get_or_create_telegram_user(update.effective_user)
        conversation = self.get_or_create_conversation(user)

        welcome_message = (
            f"üëã –ü—Ä–∏–≤–µ—Ç! –Ø {self.bot_instance.name}.\n\n"
            f"{self.bot_instance.description}\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é GPT!\n\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/help - —Å–ø—Ä–∞–≤–∫–∞\n"
            "/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
            "/settings - –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞"
        )

        await update.message.reply_text(welcome_message)
        logger.info(
            f"User {user} started conversation with bot {self.bot_instance.name}"
        )

    async def handle_help(self, update: Update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
        help_message = (
            f"ü§ñ {self.bot_instance.name}\n\n"
            f"–û–ø–∏—Å–∞–Ω–∏–µ: {self.bot_instance.description}\n\n"
            "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/start - –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n"
            "/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            "/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n"
            "/settings - –ø–æ–∫–∞–∑–∞—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n\n"
            "üí¨ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –º–Ω–µ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∏ —è –æ—Ç–≤–µ—á—É —Å –ø–æ–º–æ—â—å—é GPT!"
        )

        await update.message.reply_text(help_message)

    async def handle_clear(self, update: Update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /clear"""
        user = self.get_or_create_telegram_user(update.effective_user)
        conversation = self.get_or_create_conversation(user)

        conversation.clear_history()

        await update.message.reply_text(
            "üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞! –ú–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –Ω–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä."
        )
        logger.info(f"User {user} cleared conversation history")

    async def handle_settings(self, update: Update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
        settings_message = (
            f"‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ {self.bot_instance.name}:\n\n"
            f"ü§ñ GPT –º–æ–¥–µ–ª—å: {self.bot_instance.gpt_model}\n"
            f"üéØ –ú–∞–∫—Å–∏–º—É–º —Ç–æ–∫–µ–Ω–æ–≤: {self.bot_instance.max_tokens}\n"
            f"üå°Ô∏è –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {self.bot_instance.temperature}\n\n"
            f"üìù –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:\n{self.bot_instance.system_prompt}"
        )

        await update.message.reply_text(settings_message)

    async def handle_message(self, update: Update, context) -> None:
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä "–ø–µ—á–∞—Ç–∞–µ—Ç..."
            await context.bot.send_chat_action(
                chat_id=update.effective_chat.id, action="typing"
            )

            user = self.get_or_create_telegram_user(update.effective_user)
            conversation = self.get_or_create_conversation(user)

            user_message = update.message.text
            logger.info(f"Received message from {user}: {user_message[:50]}...")

            # –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –¥–∏–∞–ª–æ–≥
            conversation.add_message("user", user_message)

            # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è GPT
            messages = conversation.get_openai_messages()

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ GPT
            gpt_response = self.gpt_service.generate_response(
                messages=messages,
                model=self.bot_instance.gpt_model,
                max_tokens=self.bot_instance.max_tokens,
                temperature=self.bot_instance.temperature,
            )

            if gpt_response["success"]:
                # –£—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç GPT
                bot_message = gpt_response["content"]

                # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –±–æ—Ç–∞ –≤ –¥–∏–∞–ª–æ–≥
                conversation.add_message("assistant", bot_message)

                # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ —Ç–æ–∫–µ–Ω–æ–≤
                conversation.total_tokens += gpt_response["usage"]["total_tokens"]
                conversation.save()

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                await update.message.reply_text(bot_message)

                logger.info(f"Sent GPT response to {user}: {bot_message[:50]}...")
                logger.info(f"Tokens used: {gpt_response['usage']['total_tokens']}")

            else:
                # –û—à–∏–±–∫–∞ –æ—Ç GPT
                error_message = f"‚ùå {gpt_response['message']}"
                await update.message.reply_text(error_message)
                logger.error(f"GPT error for user {user}: {gpt_response}")

        except Exception as e:
            logger.error(f"Error handling message from {update.effective_user.id}: {e}")
            await update.message.reply_text(
                "üòî –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
            )

    async def start_polling(self):
        """–ó–∞–ø—É—Å–∫ polling —Ä–µ–∂–∏–º–∞"""
        if self.is_running:
            logger.warning(f"Bot {self.bot_instance.name} is already running")
            return

        try:
            await self.setup_application()

            logger.info(f"Starting bot '{self.bot_instance.name}' in polling mode...")
            self.is_running = True

            # –ó–∞–ø—É—Å–∫–∞–µ–º polling
            await self.application.initialize()
            await self.application.start()
            await self.application.updater.start_polling(
                drop_pending_updates=True, allowed_updates=["message", "callback_query"]
            )

            logger.info(f"Bot '{self.bot_instance.name}' started successfully")

            # –ñ–¥–µ–º –ø–æ–∫–∞ –±–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç
            while self.is_running and self.bot_instance.is_active:
                await asyncio.sleep(1)

                # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –±–æ—Ç–∞ –∏–∑ –ë–î
                self.bot_instance.refresh_from_db()

        except Exception as e:
            logger.error(f"Error starting bot {self.bot_instance.name}: {e}")
            self.is_running = False
        finally:
            await self.stop_polling()

    async def stop_polling(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ polling —Ä–µ–∂–∏–º–∞"""
        if not self.is_running:
            return

        logger.info(f"Stopping bot '{self.bot_instance.name}'...")
        self.is_running = False

        if self.application:
            try:
                await self.application.updater.stop()
                await self.application.stop()
                await self.application.shutdown()
            except Exception as e:
                logger.error(f"Error stopping bot {self.bot_instance.name}: {e}")

        logger.info(f"Bot '{self.bot_instance.name}' stopped")


class TelegramBotManager:
    """–ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–µ—Å–∫–æ–ª—å–∫–∏–º–∏ Telegram –±–æ—Ç–∞–º–∏"""

    def __init__(self):
        self.bot_services: Dict[int, TelegramBotService] = {}
        self.is_running = False

    async def start_all_bots(self):
        """–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –±–æ—Ç–æ–≤"""
        if self.is_running:
            logger.warning("Bot manager is already running")
            return

        self.is_running = True
        active_bots = Bot.objects.filter(is_active=True)

        logger.info(f"Starting {active_bots.count()} active bots...")

        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –±–æ—Ç–∞
        tasks = []
        for bot in active_bots:
            try:
                service = TelegramBotService(bot)
                self.bot_services[bot.id] = service
                task = asyncio.create_task(service.start_polling())
                tasks.append(task)
            except Exception as e:
                logger.error(f"Failed to start bot {bot.name}: {e}")

        if tasks:
            # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
            await asyncio.gather(*tasks, return_exceptions=True)

        self.is_running = False
        logger.info("All bots stopped")

    async def stop_all_bots(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Å–µ—Ö –±–æ—Ç–æ–≤"""
        logger.info("Stopping all bots...")
        self.is_running = False

        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã
        stop_tasks = []
        for service in self.bot_services.values():
            stop_tasks.append(service.stop_polling())

        if stop_tasks:
            await asyncio.gather(*stop_tasks, return_exceptions=True)

        self.bot_services.clear()
        logger.info("All bots stopped")
